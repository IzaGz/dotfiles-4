;; UI config

;; Faster
(setq font-lock-verbose nil)

;; no jerky scrolling
(setq scroll-conservatively 101)

;; Get rid of chrome
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)

;; No blinking cursor
(blink-cursor-mode -1)

;; No startup screen
(setq inhibit-startup-screen t)

;; No bell thanks
(setq ring-bell-function 'ignore)

; Text mode by default for scratch buffer
;(setq initial-major-mode 'text-mode)

;; Save clipboard contents into kill-ring before replace them
(setq save-interprogram-paste-before-kill t)

;; Single space between sentences is more widespread than double
(setq-default sentence-end-double-space nil)

;; scratch buffer empty
(setq initial-scratch-message nil)

;; No continuation characters
(setq-default fringe-indicator-alist
              '((truncation . nil) (continuation . nil)))

;; Nice scrolling
(setq scroll-margin 4
      scroll-conservatively 100000
      scroll-preserve-screen-position 1)

;; Mode line settings
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)

;; Enable y/n answers
(fset 'yes-or-no-p 'y-or-n-p)

;; Echo commands quickly
(setq echo-keystrokes 0.02)

;; Slower mouse scroll
(setq mouse-wheel-scroll-amount '(1))

;; A more useful frame title, that show either a file or a
;; buffer name (if the buffer isn't visiting a file)
(setq frame-title-format
      '("" invocation-name " - " (:eval (if (buffer-file-name)
                                            (abbreviate-file-name (buffer-file-name))
                                          "%b"))))
(use-package ibuffer
  :commands ibuffer
  :bind ("C-x C-b" . ibuffer)
  :config
    (setq ibuffer-saved-filter-groups
          '(("Config" (or
                       (filename . ".dotfiles/")
                       (filename . ".emacs.d/")))
            ("Shell"  (or
                       (mode . eshell-mode)
                       (mode . shell-mode)))
            ("Dired"  (mode . dired-mode))
            ("Notes"  (filename . "^.*Dropbox\\/Notes.*$"))
            ("Org"    (mode . org-mode))
            ("Emacs"  (name . "^\\*.*\\*$")))
          ibuffer-show-empty-filter-groups nil
          ibuffer-expert t
          ibuffer-auto-mode 1)
    (setq ibuffer-formats
      '((mark modified read-only " "
              (name 30 30 :left :elide) ; change: 30s were originally 18s
              " "
              (mode 16 16 :left :elide)
              " " filename-and-process)
        (mark " "
              (name 16 -1)
              " " filename)))
    (setq ibuffer-default-sorting-mode 'filename/process)

    (use-package ibuffer-vc
      :commands ibuffer-vc-generate-filter-groups-by-vc-root
      :config
      (progn
        (defun grass/ibuffer-apply-filter-groups ()
          "Combine my saved ibuffer filter groups with those generated by `ibuffer-vc-generate-filter-groups-by-vc-root'"
          (interactive)
          (setq ibuffer-filter-groups
                (append (ibuffer-vc-generate-filter-groups-by-vc-root)
                        ibuffer-saved-filter-groups))
          (message "ibuffer-vc: groups set")
          (let ((ibuf (get-buffer "*Ibuffer*")))
            (when ibuf
              (with-current-buffer ibuf
                (pop-to-buffer ibuf)
                (ibuffer-update nil t)))))

        (add-hook 'ibuffer-hook 'grass/ibuffer-apply-filter-groups))))

(use-package highlight-indentation
  :commands highlight-indentation-mode)

(use-package guide-key
  :diminish guide-key-mode
  :init
  (setq guide-key/popup-window-position 'bottom)
  (setq guide-key/guide-key-sequence t)
  (setq guide-key/idle-delay 0.4)
  (guide-key-mode 1))

(use-package smart-mode-line
  :disabled t
  :init
  (setq sml/no-confirm-load-theme t)
  (setq sml/shorten-modes nil)
  (setq sml/theme 'respectful)
  (sml/setup))

;; Ignore certain files
(use-package ignoramus
  :init
  (ignoramus-setup))

(use-package browse-kill-ring
  :bind ("M-y" . browse-kill-ring))

(use-package default-text-scale
  :bind (("s-=" . default-text-scale-increase)
         ("s--" . default-text-scale-decrease)))

;; Disable themes before loading them (in daemon mode esp.)
(defadvice load-theme (before theme-dont-propagate activate)
  (mapc #'disable-theme custom-enabled-themes))

(defun grass/set-gui-config ()
  "Enable my GUI settings"
  (interactive)
  (load-theme 'solarized-dark t)

  ;; Override a few theme settings
  (solarized-with-color-variables 'dark
    (custom-theme-set-faces
      'solarized-dark
      `(hl-sexp-face ((,class (:background ,s-mode-line-bg))))

      `(helm-match ((,class (:inherit match :foreground ,blue-hc))))
      `(company-tooltip-common ((,class (:inherit company-tooltip :weight bold :underline nil))))
      `(company-tooltip-common-selection ((,class (:inherit company-tooltip-selection :weight bold :underline nil))))
      `(mode-line
         ((,class (:foreground ,s-mode-line-fg
                   :background ,s-mode-line-bg
                   :box (:color ,s-mode-line-fg :line-width 1)
                   ))))
      `(mode-line-inactive
         ((,class (:foreground ,s-mode-line-inactive-fg
                   :background ,s-mode-line-inactive-bg
                   :box (:color ,s-mode-line-inactive-fg :line-width 1)
                   ))))))

  (menu-bar-mode +1)
  ;; Highlight the current line
  (global-hl-line-mode +1))

(defun grass/set-terminal-config ()
  "Enable my terminal settings"
  (interactive)
  (xterm-mouse-mode 1)
  (menu-bar-mode -1)
  (load-theme 'zenburn t))

(use-package solarized
  :ensure solarized-theme
  :defer t
  :init
        ;; Don't change the font for some headings and titles
  (setq solarized-use-variable-pitch nil
        ;; Don't add too much colours to the fringe
        ;;solarized-emphasize-indicators nil

        ;; Make edges of buffer easier to see
        solarized-distinct-fringe-background t

        ;; Keep font sizes the same
        solarized-height-minus-1 1.0
        solarized-height-plus-1 1.0
        solarized-height-plus-2 1.0
        solarized-height-plus-3 1.0
        solarized-height-plus-4 1.0))

(use-package zenburn-theme
  :defer t)

(defun grass/set-ui ()
  (if (display-graphic-p)
      (grass/set-gui-config)
    (grass/set-terminal-config)))

(defun grass/set-frame-config (&optional frame)
  "Establish settings for the current terminal."
  (with-selected-frame frame
    (grass/set-ui)))

;; Only need to set frame config if we are in daemon mode
(if (daemonp)
    (add-hook 'after-make-frame-functions 'grass/set-frame-config)
  ;; Load theme on app creation
  (grass/set-ui))


;; Some terminal mapping hackery
(defadvice terminal-init-xterm
  (after map-C-comma-escape-sequence activate)
  (define-key input-decode-map "\e[1;," (kbd "C-,")))

(provide 'grass-ui)
