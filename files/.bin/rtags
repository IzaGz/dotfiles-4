#!/usr/bin/env ruby
#/ Usage: rtags [ctags options]
#/ A ctags wrapper that automatically excludes files in vcs ignore files and
#/ cleans superfluous tag file entries.
#/    -h, --help                       Show help

require "optparse"
require "ostruct"

class Options
  def self.parse(argv)
    options = OpenStruct.new
    options.emacs = false
    options.outfile = 'TAGS'

    begin
      OptionParser.new do |o|
        o.on("-e") do |v|
          options.emacs = true
        end

        o.on("-f FILE") do |v|
          options.outfile = v
        end

        o.on('-h', '--help') { exec "grep ^#/ < #$0 | cut -c4-" }
        o.parse argv
      end
    rescue OptionParser::InvalidOption
      # We just want to sample a few of ctags options so ignore
      # options we haven't specified above
      argv.shift
      retry
    end

    options
  end
end

class RTags
  def self.run!(argv, options, excludes)
    new(argv, options, excludes).run!
  end

  def initialize(argv, options, excludes)
    @argv, @options, @excludes = argv, options, excludes
  end

  def run!
    build_tags_file
    clean_tags_file
  rescue Interrupt
    exit 1
  end

  private

  def build_tags_file
    command = "ctags #{ctags_exclude_flags} #{@argv.join(' ')}"
    puts "Running `#{command}`"
    system command
  end

  def ctags_exclude_flags
    @excludes.all.map { |i| "--exclude=#{i}" }.join(" ")
  end

  def clean_tags_file
    tagfile.clean!
  end

  def tagfile
    klass = @options.emacs ? EmacsTagFile : VimTagFile
    klass.new(@options.outfile)
  end
end

class EmacsTagFile
  SYMBOLS_TO_CLEAN = %w[if switch function exports it describe]

  attr_reader :tagfile

  def initialize(tagfile)
    @tagfile = tagfile
  end

  def clean!
    lines = File.readlines(tagfile)

    filtered_lines = filter(lines)

    File.open(tagfile, 'w') do |file|
      file.puts filtered_lines
    end
  end

  private

  # Filter out superfluous entries
  # For example:
  # var AppDispatcher = require('../dispatcher/AppDispatcher');AppDispatcher3,15
  # receiveAll: function(categories) {function8,151
  def filter(lines)
    predicates = [
      -> (l) { l =~ /var\s+.*=.*require\(/ }
    ] + SYMBOLS_TO_CLEAN.map { |s|
      -> (l) { l =~ /\u007F#{s}\u0001/ }
    }

    lines.reject { |l|
      predicates.any? { |p| p.call(l) }
    }
  end
end

class VimTagFile
  attr_reader :tagfile

  def initialize(tagfile)
    @tagfile = tagfile
  end

  def clean!
    lines = File.readlines(tagfile)

    filtered_lines = filter(lines)

    File.open(tagfile, 'w') do |file|
      file.puts filtered_lines
    end
  end

  def filter(lines)
    predicates = [
      -> (l) { l =~ /var\s+[a-zA-Z0-9_$]+\s+=\s+require\(.+language:js$/ },
      -> (l) { l =~ /^(if|switch|function|module\.exports|it|describe)\s.+language:js$/ }
    ]

    lines.reject { |l|
      predicates.any? { |p| p.call(l) }
    }
  end
end

class ExcludedPaths
  # Fixed set of paths to ignore
  EXCLUDED_PATHS =["node_modules", "*vendor", "*.min.js"]

  # Files that contain paths to be ignored
  IGNORE_FILES = [".gitignore", ".hgignore", ".svnignore", ".cvsignore"]

  def self.from_current_directory
    ignore_file = IGNORE_FILES.find { |p| File.exist?(p) }

    new(ignore_file)
  end

  def initialize(ignore_file)
    @ignore_file = ignore_file
  end

  def all
    @all ||= (EXCLUDED_PATHS + parse_ignore_file)
  end

  private

  def parse_ignore_file
    return [] unless @ignore_file

    File.readlines(@ignore_file)
        .map(&:chomp)
        .reject { |l| l =~ /\A#/ }
        .reject { |l| l =~ /\A\s*\z/ }
        .map { |l| l.strip.gsub(/\A\//, "") }
  end
end

if $0 == __FILE__
  options = Options.parse(ARGV.dup)
  excludes = ExcludedPaths.from_current_directory

  RTags.run!(ARGV, options, excludes)
end
